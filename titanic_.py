# -*- coding: utf-8 -*-
"""Titanic .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1noqoFz4m4ZzBQ7RzPWb07pXGYjjb6GPI
"""

import pandas as pd
import numpy as np
Titanic=pd.read_csv("/content/titanic.csv")
Titanic

"""Understanding the Data set"""

Titanic.columns

Titanic.info()

Titanic.describe()

Titanic.describe(include='object')

Titanic.head(n=5)

Titanic.head(-10)

Titanic.tail(n=5)

Titanic.loc[1,'name']

Titanic.loc[0,'age']

Titanic.loc[[1,2,3],["name","age","parch"]]

Titanic.loc[5]

Titanic.iloc[2,2]

Titanic.iloc[2,5]

Titanic.iloc[::2,1]

Titanic.iloc[::1,2]

Titanic.iloc[::2,:3:1]

"""Data Cleaning"""

Titanic.isnull()

Titanic.isnull().sum().isnull()

null_counts = Titanic.isnull().sum().sum()
print(null_counts)

Titanic['cabin'].isnull()

Titanic[Titanic['cabin'].isnull()]

Titanic['cabin'].notnull()

Titanic[Titanic['cabin'].notnull()]

Titanic.describe()

Titanic.info()

Titanic.isnull().sum()

"""To handle null values using **fillna** functions"""

Titanic["fare"]
c=0
for i in Titanic["fare"]:
  if pd.isnull(i):
    break
  c+=1
print(c)

Titanic.loc[1225,'fare']

Titanic['fare'].mean()

fare_mean=Titanic['fare'].mean()
fare_mean

Titanic['fare'].fillna(fare_mean,inplace=True)

Titanic.info()

Titanic['fare']=Titanic['fare'].fillna(fare_mean)
Titanic['fare'].isnull()

Titanic.info()

Titanic.isnull().sum()

Titanic['age'].mean()
age_mean=Titanic['age'].mean()
age_mean

Titanic['age'].fillna(age_mean,inplace=True)
Titanic

Titanic.info()

Titanic.isnull().sum()

Titanic['embarked'].isnull().sum()

c=0
for i in Titanic['embarked']:
  if pd.isnull(i):
    print(c)
  c+=1

Titanic['embarked'].mode()

Titanic['embarked'].mode()[0]
embarked_mode=Titanic['embarked'].mode()[0]

Titanic['embarked'].fillna(embarked_mode,inplace=True)
Titanic

Titanic.info()

Titanic.dropna(axis=1,inplace=True)
Titanic

Titanic.info()

Titanic.isnull().sum().sum()

Titanic.astype({'age':int})

Titanic['fare']=Titanic['fare'].astype(int)

Titanic

"""Data Manipulation or transformation
1.set_index()
2.reset_index()
3.rename()
4.replace()
5.map()
6.merge()
7.concat()
8.drop()
9.explode()
10.melt()
11.cut()
"""

df=pd.DataFrame({'empno':['e1','e2','e3','e4'],
                 'ename':['smith','allen','ward','ford'],
                 'sal':[1000,3000,400,2000],
                 'comm':[200,None,500,None]})

df

df['comm']

df['comm'].mean()
df_mean=df['comm'].mean()

df['comm'].fillna(df_mean,inplace=True)
df.info()
df

df.reset_index(drop=False)
df

df.rename(columns={'empno':'emp_no'},inplace=True)
df

df.info()

df

df.replace({1000:1200})

df.drop('comm',axis=1,inplace=False)
df

Titanic

# Titanic['age']=Titanic['age'].fillna(0).astype(int)
# Titanic

Titanic.rename(columns={'sex':'gender'},inplace=True)
Titanic

Titanic['gender']=Titanic['gender'].replace({'male':1,'female':0})
Titanic

Titanic['embarked']=Titanic['embarked'].replace({'S':'southampton','C':'cherbourg','Q':'qeenstown'})
Titanic

"""Feature Engineering"""

Titanic['Family_count']=Titanic['sibsp']+Titanic['parch']
Titanic

Titanic.drop(columns=['sibsp','parch'],inplace=True)
Titanic

"""Converting name (object-----> string) and split it"""

Titanic['name'].str.split(',',expand=True) #if expand=False it gives o/p in form of list                                            #if expand=True then, each element of list will be separate columns

Titanic['last_name']=Titanic['name'].str.split(',',expand=True)[0]

title_fname=Titanic['name'].str.split(',',expand=True)[1]
Titanic['title']=title_fname.str.split('.',n=1,expand=True)[0]
Titanic['first_name']=title_fname.str.split('.',n=1,expand=True)[1]
Titanic

Titanic.drop(columns=['name'],inplace=True)
Titanic

columns=['title','first_name','last_name','gender','age','Family_count','ticket','pclass','fare','embarked','survived']
Titanic=Titanic[columns]
Titanic

Titanic.sort_values(by=['first_name'])
Titanic

Titanic['age'].max()

Titanic['age']=pd.cut(Titanic['age'],bins=[0,15,30,59,100],labels=['Child','Teenager','Adult','Senior_Citizen'])
Titanic

Titanic.rename(columns={'age':'age_group'},inplace=True)
Titanic

"""Group by Records"""

gb_obj=Titanic.groupby('age_group')

gb_obj.groups

gb_obj.get_group('Adult')

gb_obj.get_group('Child')

gb=Titanic.groupby(['age_group','gender'])

gb.get_group(('Adult',0))

"""Aggregate Methods"""

Titanic.count()

Titanic['embarked'].count()

gp_obj=Titanic.groupby('embarked')
gp_obj.count()

gp_obj['age_group'].count()

gp_obj[['age_group','survived']].count()

"""max()"""

Titanic['fare'].max()

gp_obj.max()

gp_obj[['fare','age_group']].max()

"""min()

"""

Titanic['fare'].min()

gp_obj['fare'].min()

gp_obj[['fare','age_group']].min()

gp_obj['fare'].sum()

gp_obj.sum(numeric_only=True)

Titanic.sum(numeric_only=True)

Titanic['fare'].mean()

# 1. get the statistical description for all numerical columns
Titanic.describe()

# 2. get top 5 records(passangers data)
Titanic.head(n=5)

# 3. get the last 5 records
Titanic.tail(n=5)

# 4. get the total_no_records
len(Titanic)
Titanic.shape[0]

# 5. get the total columns
print(Titanic.columns)
Titanic.shape[1]

# 6. get the first row
Titanic.head(1)
Titanic.loc[0,::]
# it will show all the records from first row
# index value is always start with 0

# 7. get the second row
Titanic.loc[1,::]

# 8. get the fname and age of the all the passangers
Titanic.loc[::,['first_name','age_group']]

# 9. get the 5th and 6th passangers fname,age and survived details
Titanic.loc[[5,6],['first_name','age_group','survived']]

# 10. get the passengers details of pclass 1
cond=Titanic['pclass']==1
Titanic[cond]

# 11. get the passengers fname and age of pclass 1
cond=Titanic['pclass']==1
Titanic.loc[cond,['first_name','age_group']]

# 12. get the male passangers details of pclass 1
cond1=(Titanic['gender']==1)&(Titanic['pclass']==1)
Titanic.loc[cond1,::]

# 13. get the female passengers fname who were survived in pclass 1
cond=(Titanic['gender']==1)&(Titanic['survived']==1)&(Titanic['pclass']==1)
Titanic.loc[cond,['first_name']]

# 14. get the passengers detailes whose embarked is southampton,cherbourg
cond=(Titanic['embarked']=='southampton')|(Titanic['embarked']=='cherbourg')
Titanic.loc[cond,::]
# or use this to reduce the code
# Titanic[Titanic['embarked'].isin(['southampton','cherbourg'])]

# 15. get the no_of_passengers
Titanic.shape[0]

# 16. get the no_of_male passengers
Titanic[Titanic['gender']==1].shape[0]

# 17. get the highest fare
Titanic['fare'].max()

# 18. get the lowest fare among female passenge
Titanic[Titanic['gender']==1]['fare'].min()

# 19. get the no_of survival
Titanic[Titanic['survived']==1].shape[0]

# 20. get the survival rate
Titanic[Titanic['survived']==1].shape[0]/Titanic.shape[0]*100

# 21. get the aggregates for fare column
Titanic['fare'].agg(['min','max','mean','median','std','var'])

# 22. get the no_of_passengers in each gender
Titanic['gender'].value_counts()

# 23. get the total fare in each pclass
Titanic.groupby('pclass')['fare'].sum()

# 24. get the pclass wise survived rate and count
Titanic.groupby('pclass')['survived'].value_counts()
# Titanic.groupby('pclass')['survived'].value_counts(normalize=True)*100

# 25. get the pclass,gender wise survival rate
Titanic.groupby(['pclass','gender'])['survived'].value_counts()
# Titanic.groupby(['pclass','gender'])['survived'].value_counts(normalize=True)*100

# 26. get the no_of_passengers in each pclass
Titanic['pclass'].value_counts()

# 27. find the pclass in which lowest no_of passengers are there
Titanic['pclass'].value_counts().idxmin()

# 28. find the no_of_families travelling
Titanic['Family_count'].value_counts()

# 29. no_of_families travelling who got survived
Titanic[Titanic['survived']==1]['Family_count'].value_counts()

# 30.what is the correlation between fare and pclass
Titanic[['fare','pclass']].corr()

# 31.what is the correlation between fare and survived?
Titanic[['fare','survived']].corr()

# 33. what is the correlation between gender and survived?
Titanic[['gender','survived']].corr()

# 34.get the pclass wise male and female count and survived
Titanic.groupby(['pclass','gender'])['survived'].value_counts()

# 35.get the age_seg wise no_of_passangers and survival rate
Titanic.groupby('age_group')['survived'].value_counts()

Titanic.groupby('age_group')['survived'].idxmax()

# 35. get the age_seg which has high survival rate
Titanic.groupby('age_group')['survived'].value_counts().idxmax()

# 36. get the gender and age which has high survival rate
Titanic.groupby(['gender','age_group'])['survived'].value_counts().idxmax()

# 37. get the pclass,gender,age in which survival rate high
Titanic.groupby(['pclass','gender','age_group'])['survived'].value_counts().idxmax()

# 38. get the solo travelers full name
Titanic[Titanic['Family_count']==0]['first_name']

# 39.solo travelers survival rate v/s passengers with family survival rate
Titanic.groupby('Family_count')['survived'].value_counts()

#  Find the gender and pclass wise survival rate of solo travelers
Titanic[Titanic['Family_count']==0].groupby(['gender','pclass'])['survived'].value_counts()

import seaborn as sns
 import matplotlib.pyplot as plt

Titanic['gender']=Titanic['gender'].replace({1:'male',0:'female'})
Titanic

# 1. plot the total count of male and female passengers
a=sns.histplot(x='gender',data=Titanic)
a.bar_label(a.containers[0])
plt.title('Gender Count')

# observation--> male passengers are more than female passnagers in titanic data set

# 2. plot the total count of male and female passengers in each passangers pclass
a=sns.countplot(data=Titanic,x='gender',hue='pclass')
for c in a.containers:
  a.bar_label(c)

# Observation--> male and female passengers are more in pclass 3 and less in pclass 2

# 3.plot the count of passengers in each age catogories
age_group = Titanic['age_group'].value_counts()
plt.pie(x=age_group.values,labels=age_group.index,autopct='%.3f%%',explode=[0,0,0.05,0])

# Observation--> In this Titani Dataset Teenagers are Travelled more than other age group

# 4. plot the gender wise count of survived and not_survived passengers

plt.figure(figsize=(6,4))
a=sns.countplot(data=Titanic,x='survived',hue='gender')
for c in a.containers:
  a.bar_label(c)
plt.xticks([0,1],labels=['non_survived','survived'])

# 5. plot the variation in fare and age
plt.figure(figsize=(6,4))
a=sns.scatterplot(data=Titanic,x='age_group',y='fare')

# Observation--> In this charts adult paying high fare

# 6.Plot the count of survived and non-survived passengers in each age category.
plt.figure(figsize=(6,3))
a=sns.countplot(data=Titanic,x='survived',hue='age_group')
for c in a.containers:
  a.bar_label(c)
plt.xticks([0,1],labels=['non_survived','survived'])
# questions:
# adults are more in which pclass
# adults are more in which  gender

# 7.Plot the total fare collected for each passenger class.
# plt.figure(figsize=(6,3))
# a=sns.barplot(data=Titanic,x='pclass',y='fare',estimator='sum')
# a.bar_label(a.containers[0],)

# Observation--> In this Charts pclass 1 passengers are paid high fare amount

# Calculate the total fare for each passenger class
total_fare = Titanic.groupby('pclass')['fare'].sum()

# Create the bar plot
plt.figure(figsize=(6, 3))
ax = sns.barplot(x=total_fare.index, y=total_fare.values)
plt.xlabel("Passenger Class")
plt.ylabel("Total Fare")
plt.title("Total Fare Collected for Each Passenger Class")

# Add labels to the bars
for p in ax.patches:
    ax.annotate(format(p.get_height(), '.0f'), (p.get_x() + p.get_width() / 2., p.get_height()), ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')

plt.show()

# 8.Plot the distribution of fares.
plt.figure(figsize=(6,5))
a=sns.kdeplot(data=Titanic,x='fare',hue='gender',fill=True,shade=True)
a.grid()
plt.xticks(np.arange(0,600,50))
# in 10 to 80 male passengers are 1.6 density and 0 to 50 female are have more density

# 9. plot the distribution of ages.
plt.figure(figsize=(6,4))
a=sns.histplot(data=Titanic,x='age_group')
a.bar_label(a.containers[0])

# 10.Plot the relationship between fare and passenger class.
plt.figure(figsize=(6,3))
a=sns.lineplot(data=Titanic,x='pclass',y='fare')
a.grid()
# we have outlier which is avove 500
# p class is discrid data placss is increasing and fare will be decreasing

